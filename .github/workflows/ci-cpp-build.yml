name: C++ Build, Test, and Generate Report

on:
  push:
    branches: [main, hw]
  pull_request:
    branches: [main, hw]

jobs:
  build-docker:
    uses: ./.github/workflows/docker-build.yml

  test:
    name: Build and Test
    needs: build-docker
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: cpp_course-image

      - name: Load Docker image
        run: docker load -i cpp_course_image.tar

      - name: Run tests in container
        id: run_tests
        run: |
          mkdir -p test-results
          docker run --name cpp_course_container \
            -v ${{ github.workspace }}:/workspace \
            bmstu_cpp_course-bmstu:latest \
            bash -c "cd /workspace && \
                    mkdir -p build && \
                    cd build && \
                    cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_FLAGS='-fprofile-arcs -ftest-coverage' && \
                    cmake --build . && \
                    cd .. && \
                    mkdir -p test-results && \
                    # Запускаем тестовые исполняемые файлы проекта и сохраняем статус выполнения
                    exit_code=0 && \
                    for test_bin in \$(find build/tasks -type f -executable); do \
                      echo \"Running \$test_bin\" && \
                      \$test_bin --gtest_output=xml:test-results/\$(basename \$test_bin).xml; \
                      test_exit_code=\$?; \
                      if [ \$test_exit_code -ne 0 ]; then \
                        echo \"Test \$test_bin failed with exit code \$test_exit_code\" && \
                        exit_code=1; \
                      fi; \
                    done && \

                    cp -r test-results/* /workspace/test-results/ || true"
          
          echo "Found test results:"
          ls -la test-results/

      - name: Upload test results (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_results_xml
          path: test-results/
          if-no-files-found: ignore
          retention-days: 5

  generate-report:
    name: Generate HTML Report
    needs: test
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Выполнять даже если предыдущий job завершился с ошибкой
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download test results (XML)
        uses: actions/download-artifact@v4
        with:
          name: test_results_xml
          path: test-results/
          if-no-files-found: ignore

      - name: Create empty test results if none exist
        run: |
          mkdir -p test-results
          if [ -z "$(ls -A test-results)" ]; then
            echo "No test results found, creating empty report"
            cat > test-results/empty_report.xml << 'EOF'
            <testsuites>
              <testsuite name="BuildFailed" tests="0" failures="0" errors="1" skipped="0">
                <testcase name="BuildFailed" status="run">
                  <error message="Build failed or no tests were executed"/>
                </testcase>
              </testsuite>
            </testsuites>
            EOF
          fi

      - name: Install xsltproc
        run: sudo apt-get install -y xsltproc

      - name: Apply XSLT transformation
        run: |
          for xml_file in test-results/*.xml; do
            xsltproc transform.xsl "$xml_file" > "${xml_file%.xml}.html"
          done

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: test_report_html
          path: test-results/*.html
          if-no-files-found: warn
          retention-days: 5
